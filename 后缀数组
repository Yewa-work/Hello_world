#include<cstdio>
#include<cstring>
#include<algorithm>
#include<iostream>
#include<string>
#include<vector>
#include<stack>
#include<bitset>
#include<cstdlib>
#include<cmath>
#include<set>
#include<list>
#include<deque>
#include<map>
#include<queue>
using namespace std;
typedef long long ll;
const double PI = acos(-1.0);
const double eps = 1e-6;
const int  mod =1000000;
const int maxn =100100;
char s[maxn];
int rank[maxn],height[maxn];
int sa[maxn],t[maxn],t2[maxn],c[maxn];
bool cmp(int *y,int i,int k,int n)
{
    int aa=y[sa[i]],bb=y[sa[i-1]];
    int cc=sa[i]+k<n?y[sa[i]+k]:0,dd=sa[i-1]+k<n?y[sa[i-1]+k]:0;
    return aa==bb&&cc==dd;
}
void build_sa(int n,int m)
{
    void calheight(int n);
    int i,*x=t,*y=t2;
    for(i=0;i<m;i++) c[i]=0;
    for(i=0;i<n;i++) c[x[i]=s[i]]++;
    for(i=1;i<m;i++) c[i]+=c[i-1];
    for(i=n-1;i>=0;i--) sa[--c[x[i]]]=i;

    for(int k=1;k<=n;k<<=1)
    {
        int p=0;
        for(i=n-k;i<n;i++) y[p++]=i;
        for(i=0;i<n;i++) if(sa[i]>=k) y[p++]=sa[i]-k;

        for(i=0;i<m;i++) c[i]=0;
        for(i=0;i<n;i++) c[x[y[i]]]++;
        for(i=1;i<m;i++) c[i]+=c[i-1];
        for(i=n-1;i>=0;i--) sa[--c[x[y[i]]]]=y[i];

        swap(x,y);
        m=2;
        x[sa[0]]=1;
        for(i=1;i<n;i++)
            x[sa[i]]=cmp(y,i,k,n)?m-1:m++;
        if(m>n) break;
    }

    calheight(n);
}
void calheight(int n)
{
    int i,j;
    for(i=0;i<n;i++) rank[sa[i]]=i;
    int h=0;
    for(i=0;i<n;i++)
    {
        if(h) h--;
        //cout<<"rank: "<<rank[i]<<endl;
        if(rank[i]==0) continue;
        int j=sa[rank[i]-1];
        //cout<<"j: "<<j<<endl;
        while(s[i+h]==s[j+h]) h++;
        //cout<<"i: "<<i<<endl;
        //cout<<"rank: "<<rank[i]<<"  "<<"h: "<<h<<endl;
        height[rank[i]]=h;
    }
}
ll solve(int n)
{
    ll ans=0;
    for(int i=0;i<n;i++)
    {
        ans+=(n-height[i]-sa[i]);
    }
    return ans;
}
int main()
{
    int num1;
    scanf("%d",&num1);
    while(num1--)
    {
        scanf("%s",s);
        int num=strlen(s);
        build_sa(num,300);
        ll sum=solve(num);
        printf("%I64d\n",sum);
    }
    return 0;
}
